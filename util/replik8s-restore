#!/usr/bin/env python3

import argparse
import inflection
import kubernetes
import logging
import os
import re
import time
import yaml

logging_format = '[%(asctime)s] [%(levelname)s] - %(message)s'
logging_level = os.environ.get('LOGGING_LEVEL', logging.INFO)
logger = None

if os.path.exists('/var/run/secrets/kubernetes.io/serviceaccount'):
    kubernetes.config.load_incluster_config()
else:
    kubernetes.config.load_kube_config()

core_v1_api = kubernetes.client.CoreV1Api()
custom_objects_api = kubernetes.client.CustomObjectsApi()
api_client = core_v1_api.api_client
api_groups = {}

def init_logger():
    global logger
    handler = logging.StreamHandler()
    handler.setLevel(logging_level)
    handler.setFormatter(
        logging.Formatter(logging_format)
    )
    logger = logging.getLogger('restore')
    logger.setLevel(logging_level)
    logger.addHandler(handler)
    logger.propagate = False

def check_restore_status(api_group, kind, plural, restore_status_on):
    if '*' in restore_status_on:
        return True
    if api_group:
        if f"*.{api_group}" in restore_status_on:
            return True
        elif f"{kind}.{api_group}" in restore_status_on:
            return True
        elif f"{plural}.{api_group}" in restore_status_on:
            return True
    else:
        if kind in restore_status_on:
            return True
        elif plural in restore_status_on:
            return True
    return False

def discover_api_group(api_group, version):
    resp = api_client.call_api(
        '/apis/{}/{}'.format(api_group,version), 'GET',
        auth_settings=['BearerToken'], response_type='object'
    )
    group_info = resp[0]
    if api_group not in api_groups:
        api_groups[api_group] = {}
    api_groups[api_group][version] = group_info

def find_deployments(label_selector):
    deployments = custom_objects_api.list_cluster_custom_object(
        'apps', 'v1', 'deployments', label_selector=label_selector
    ).get('items', [])
    return [dict(
        name = deployment['metadata']['name'],
        namespace = deployment['metadata']['namespace'],
    ) for deployment in deployments]

def get_resource_from_reference(reference, namespace):
    api_version = reference['apiVersion']
    kind = reference['kind']
    name = reference['name']

    # First check for namespaced resource first
    if namespace:
        try:
            if api_version == 'v1':
                read_method = getattr(core_v1_api, 'read_namespaced_' + inflection.underscore(kind))
                return read_method(name, namespace)
            elif '/' in api_version:
                api_group, api_version = api_version.split('/')
                plural = resource_kind_to_plural(api_group, api_version, kind)
                return custom_objects_api.get_namespaced_custom_object(
                    api_group, api_version, namespace, plural, name
                )
        except AttributeError:
            pass
        except kubernetes.client.rest.ApiException as e:
            if e.status != 404:
                raise
    try:
        if api_version == 'v1':
            read_method = getattr(core_v1_api, 'read_' + inflection.underscore(kind))
            return read_method(name)
        elif '/' in api_version:
            api_group, api_version = api_version.split('/')
            plural = resource_kind_to_plural(api_group, api_version, kind)
            return custom_objects_api.get_cluster_custom_object(
                api_group, api_version, plural, name
            )
    except AttributeError:
        pass
    except kubernetes.client.rest.ApiException as e:
        if e.status != 404:
            raise

def resource_kind_to_plural(api_group, version, kind):
    if not api_group:
        return inflection.pluralize(kind).lower()

    if api_group not in api_groups \
    or version not in api_groups[api_group]:
        discover_api_group(api_group, version)

    for resource in api_groups[api_group][version]['resources']:
        if resource['kind'] == kind:
            return resource['name']
    return None

def ref_print_format(ref):
    if 'namespace' in ref:
        return '{} {} {} in {}'.format(
            ref['apiVersion'], ref['kind'], ref['name'], ref['namespace']
        )
    else:
        return '{} {} {}'.format(
            ref['apiVersion'], ref['kind'], ref['name']
        )

def resource_print_format(resource):
    metadata = resource['metadata']
    if 'namespace' in resource:
        return '{} {} {} in {}'.format(
            resource['apiVersion'], resource['kind'], metadata['name'], metadata['namespace']
        )
    else:
        return '{} {} {}'.format(
            resource['apiVersion'], resource['kind'], metadata['name']
        )

def process_backup_files(backup_path, handler):
    logger.debug('Processing backup from %s', backup_path)
    if backup_path.endswith(".json") \
    or backup_path.endswith(".yaml") \
    or backup_path.endswith(".yml"):
        process_backup_file(backup_path, handler)
    else:
        for root, dirs, files in os.walk(backup_path):
            for filename in files:
                if filename.endswith(".json") \
                or filename.endswith(".yaml") \
                or filename.endswith(".yml"):
                     process_backup_file(os.path.join(root, filename), handler)

def process_backup_file(file_path, handler):
    logger.debug('Processing %s', file_path)
    with open(file_path) as f:
        documents = yaml.safe_load_all(f)
        for document in documents:
            process_backup_document(document, handler)

def process_backup_document(resource, handler):
    api_version = resource.get('apiVersion')
    if not api_version:
        logger.warning('Resource in %s missing apiVersion, ignoring.')
        return
    kind = resource.get('kind')
    if not kind:
        logger.warning('Resource in %s missing kind, ignoring.')
        return

    if api_version == 'v1' and kind == 'List':
        for item in resource.get('items', []):
            handler(item)
    else:
        handler(resource)

def restore_cluster_core_v1_resource(kind, name, resource, restore_status):
    underscore_kind = inflection.underscore(kind)
    create_method = getattr(core_v1_api, f"create_{underscore_kind}")
    delete_method = getattr(core_v1_api, f"delete_{underscore_kind}")
    patch_method = getattr(core_v1_api, f"patch_{underscore_kind}")
    read_method = getattr(core_v1_api, f"read_{underscore_kind}")

    try:
        current = read_method(name)
        logger.info('Delete current %s %s', kind, name)
        if current.metadata.finalizers:
            patch_method(name, {'metadata': {'finalizers': []}})
        delete_method(name)
    except kubernetes.client.rest.ApiException as e:
        if e.status != 404:
            raise
    logger.info('Create %s %s', kind, name)
    create_method(resource)
    if restore_status and 'status' in resource:
        patch_status_method = getattr(core_v1_api, f"patch_{underscore_kind}_status")
        patch_status_method(name, resource)

def restore_namespaced_core_v1_resource(kind, name, namespace, resource, restore_status):
    underscore_kind = inflection.underscore(kind)
    create_method = getattr(core_v1_api, 'create_namespaced_' + underscore_kind)
    delete_method = getattr(core_v1_api, 'delete_namespaced_' + underscore_kind)
    patch_method = getattr(core_v1_api, 'patch_namespaced_' + underscore_kind)
    read_method = getattr(core_v1_api, 'read_namespaced_' + underscore_kind)

    try:
        current = read_method(name, namespace)
        logger.info('Delete current %s %s in %s', kind, name, namespace)
        if current.metadata.finalizers:
            patch_method(name, namespace, {'metadata': {'finalizers': []}})
        delete_method(name, namespace)
    except kubernetes.client.rest.ApiException as e:
        if e.status != 404:
            raise
    logger.info('Create %s %s in %s', kind, name, namespace)
    create_method(namespace, resource)
    if restore_status and 'status' in resource:
        patch_status_method = getattr(core_v1_api, f"patch_namespaced_{underscore_kind}_status")
        patch_status_method(name, namespace, resource)

def restore_cluster_custom_resource(api_group, api_version, kind, name, plural, resource, restore_status):
    try:
        current = custom_objects_api.get_cluster_custom_object(
            api_group, api_version, plural, name
        )
        logger.info('Delete current %s/%s %s %s', api_group, api_version, kind, name)
        if current['metadata'].get('finalizers'):
            custom_objects_api.patch_cluster_custom_object(
                api_group, api_version, plural, name,
                {'metadata': {'finalizers': []}}
            )
        custom_objects_api.delete_cluster_custom_object(
            api_group, api_version, plural, name
        )
    except kubernetes.client.rest.ApiException as e:
        if e.status != 404:
            raise

    logger.info('Create %s/%s %s %s', api_group, api_version, kind, name)
    custom_objects_api.create_cluster_custom_object(
        api_group, api_version, plural, resource
    )

    if restore_status and 'status' in resource:
        custom_objects_api.patch_cluster_custom_object_status(
            api_group, api_version, plural, name, resource
        )

def restore_namespaced_custom_resource(api_group, api_version, kind, name, namespace, plural, resource, restore_status):
    try:
        current = custom_objects_api.get_namespaced_custom_object(
            api_group, api_version, namespace, plural, name
        )
        logger.info('Delete current %s/%s %s %s in %s', api_group, api_version, kind, name, namespace)
        if current['metadata'].get('finalizers'):
            custom_objects_api.patch_namespaced_custom_object(
                api_group, api_version, namespace, plural, name,
                {'metadata': {'finalizers': []}}
            )
        custom_objects_api.delete_namespaced_custom_object(
            api_group, api_version, namespace, plural, name
        )
    except kubernetes.client.rest.ApiException as e:
        if e.status != 404:
            raise

    logger.info('Create %s/%s %s %s in %s', api_group, api_version, kind, name, namespace)
    custom_objects_api.create_namespaced_custom_object(
        api_group, api_version, namespace, plural, resource
    )

    if restore_status and 'status' in resource:
        custom_objects_api.patch_namespaced_custom_object_status(
            api_group, api_version, namespace, plural, name, resource
        )

def restore_resource(resource, create_namespace, restore_status_on):
    api_group_version = resource.get('apiVersion')
    kind = resource.get('kind')
    metadata = resource.get('metadata', {})
    name = metadata.get('name', {})
    namespace = metadata.get('namespace', {})

    # Minimal sanity checks before attempting restore
    if not api_group_version:
        raise Exception('Unable to restore without apiVersion!')
    elif api_group_version != 'v1' and not '/' in api_group_version:
        raise Exception("Unable to restore apiVersion {api_group_version}")
    if not kind:
        raise Exception('Unable to restore without kind!')
    if not metadata:
        raise Exception('Unable to restore without metadata!')
    if not metadata:
        raise Exception('Unable to restore without metadata.name!')

    if '/' in api_group_version:
        api_group, api_version = api_group_version.split('/')
    else:
        api_group = None
        api_version = api_group_version

    # Remove dynamic fields
    metadata.pop('creationTimestamp', None)
    metadata.pop('resourceVersion', None)
    metadata.pop('selfLink', None)
    metadata.pop('uid', None)

    # Remove owner references as the uid in the references will not match after restore
    metadata.pop('ownerReferences', None)

    # Get plural from resource kind
    plural = resource_kind_to_plural(api_group, api_version, kind)
    if not plural:
        raise Exception(f"Unable to determine plural for {api_group_version} {kind}")

    # Check if retore status is enabled for this resource
    restore_status = check_restore_status(
        api_group=api_group,
        kind=kind,
        plural=plural,
        restore_status_on=restore_status_on
    )

    if namespace:
        restore_namespaced_resource(
            api_group = api_group,
            api_version = api_version,
            create_namespace = create_namespace,
            kind = kind,
            name = name,
            namespace = namespace,
            plural = plural,
            resource = resource,
            restore_status = restore_status,
        )
    else:
        restore_cluster_resource(
            api_group = api_group,
            api_version = api_version,
            kind = kind,
            name = name,
            plural = plural,
            resource = resource,
            restore_status = restore_status,
        )

def restore_namespaced_resource(create_namespace, namespace, **kwargs):
    try:
        __restore_namespaced_resource(namespace=namespace, **kwargs)
    except kubernetes.client.rest.ApiException as e:
        if e.status == 404 and create_namespace:
            logger.info('Create Namespace %s', namespace)
            core_v1_api.create_namespace({"metadata": {"name": namespace}})
            __restore_namespaced_resource(namespace=namespace, **kwargs)
        else:
            raise

def __restore_namespaced_resource(api_group, api_version, kind, name, namespace, plural, resource, restore_status):
    if api_group:
        restore_namespaced_custom_resource(
            api_group = api_group,
            api_version = api_version,
            kind = kind,
            name = name,
            namespace = namespace,
            plural = plural,
            resource = resource,
            restore_status = restore_status,
        )
    else:
        restore_namespaced_core_v1_resource(
            kind = kind,
            name = name,
            namespace = namespace,
            resource = resource,
            restore_status = restore_status,
        )

def restore_cluster_resource(api_group, api_version, kind, name, plural, resource, restore_status):
    if api_group:
        restore_cluster_custom_resource(
            api_group = api_group,
            api_version = api_version,
            kind = kind,
            name = name,
            plural = plural,
            resource = resource,
            restore_status = restore_status,
        )
    else:
        restore_cluster_core_v1_resource(
            kind = kind,
            name = name,
            resource = resource,
            restore_status = restore_status,
        )

def restore_owner_references(resource):
    api_version = resource.get('apiVersion')
    kind = resource.get('kind')
    metadata = resource.get('metadata', {})
    name = metadata['name']
    namespace = metadata.get('namespace')
    owner_references = metadata.get('ownerReferences', [])

    if not owner_references:
        return
    for owner_reference in owner_references:
        owner = get_resource_from_reference(owner_reference, namespace)
        if owner:
            if hasattr(owner, 'metadata'):
                owner_reference['uid'] = owner.metadata.uid
            else:
                owner_reference['uid'] = owner['metadata']['uid']
        else:
            logger.warning('Not restoring ownerReferences for %s, owner %s not found!',
                resource_print_format(resource),
                ref_print_format(owner_reference)
            )
            return

    patch = {'metadata': {'ownerReferences': owner_references}}
    if api_version == 'v1':
        underscore_kind = inflection.underscore(kind)
        if 'namespace' in metadata:
            logger.info("Restoring owner references on %s %s in %s", kind, name, namespace)
            patch_method = getattr(core_v1_api, 'patch_namespaced_' + underscore_kind)
            patch_method(name, namespace, patch)
        else:
            logger.info("Restoring owner references on %s %s", kind, name)
            patch_method = getattr(core_v1_api, 'patch_' + underscore_kind)
            patch_method(name, patch)
    elif '/' in api_version:
        api_group, api_version = api_version.split('/')
        plural = resource_kind_to_plural(api_group, api_version, kind)
        if 'namespace' in metadata:
            logger.info("Restoring owner references on %s/%s %s %s in %s", api_group, api_version, kind, name, namespace)
            custom_objects_api.patch_namespaced_custom_object(
                api_group, api_version, namespace, plural, name, patch
            )
        else:
            logger.info("Restoring owner references on %s/%s %s %s", api_group, api_version, kind, namespace)
            custom_objects_api.patch_cluster_custom_object(
                api_group, api_version, plural, name, patch
            )
    else:
        logger.warning('Unable to handle apiVersion %s', api_version)

def stop_operators(operator_list):
    # Check that all operator deployments exist
    for operator in operator_list:
        try:
            deployment = custom_objects_api.get_namespaced_custom_object(
                'apps', 'v1', operator['namespace'], 'deployments', operator['name']
            )
            operator['replicas'] = deployment['spec']['replicas']
            operator['selector'] = deployment['spec']['selector']

        except kubernetes.client.rest.ApiException as e:
            if e.status == 404:
                logger.error('Unable to find deployment %s in %s', operator['name'], operator['namespace'])
                sys.exit(1)
            else:
                raise

    for operator in operator_list:
        logger.info('Scale deployment %s in %s to 0 replicas', operator['name'], operator['namespace'])
        deployment = custom_objects_api.patch_namespaced_custom_object(
            'apps', 'v1', operator['namespace'], 'deployments', operator['name'],
            {"spec": {"replicas": 0}}
        )

    for operator in operator_list:
        if 'matchLabels' not in operator['selector']:
            logger.warning(
                'Do not know how to find pods for %s in %s, no spec.selector.matchLabels',
                operator['name'], operator['namespace']
            )
            continue

        label_selector = ','.join(["{}={}".format(k, v) for k, v in operator['selector']['matchLabels'].items()])

        attempt = 1
        while True:
            time.sleep(5)
            pods = core_v1_api.list_namespaced_pod(
                operator['namespace'], label_selector=label_selector
            )
            if 0 == len(pods.items):
                break
            attempt += 1
            if attempt > 60:
                raise Exception('Failed to scale down {} in {}'.format(operator['name'], operator['namespace']))
            logger.info('Wait for deployment %s in %s to scale down', operator['name'], operator['namespace'])

def restart_operators(operator_list):
    for operator in operator_list:
        logger.info('Scale deployment %s in %s to %d replicas', operator['name'], operator['namespace'], operator['replicas'])
        deployment = custom_objects_api.patch_namespaced_custom_object(
            'apps', 'v1', operator['namespace'], 'deployments', operator['name'],
            {"spec": {"replicas": operator['replicas']}}
        )

def restore_backup(backup_path, create_namespaces, restore_status_on):
    logger.info("Restoring resources")
    process_backup_files(
        backup_path,
        lambda x : restore_resource(x, create_namespace=create_namespaces, restore_status_on=restore_status_on)
    )
    logger.info("Restoring owner references")
    process_backup_files(backup_path, restore_owner_references)

def main():
    import argparse
    backup_path = os.environ.get('BACKUP_PATH', '')

    parser = argparse.ArgumentParser(description='Restore resources from backup.')
    parser.add_argument(
        'backup', metavar='BACKUP_PATH', type=str,
        nargs=(1 if backup_path=='' else '?'), default=backup_path
    )
    parser.add_argument(
        '--create-namespaces', action='store_true',
        help='Create namespaces as needed to restore namespace resources.'
    )
    parser.add_argument(
        '--restore-status-on', metavar='PLURAL.APIGROUP', type=str, nargs='*', action='append',
        help='List of kinds of resources for which to restore status. Ex: widgets.example.com'
    )
    parser.add_argument(
        '--stop-operators', metavar='NAMESPACE/DEPLOYMENT', type=str, nargs='*', action='append',
        help='List of operators to stop before restart and restart after completion.'
    )
    parser.add_argument(
        '--stop-operator-selectors', metavar='LABEL=VALUE', type=str, nargs='*', action='append',
        help='List of operators to stop before restart and restart after completion.'
    )
    args = parser.parse_args()

    if args.restore_status_on:
        restore_status_on = [item for sublist in args.restore_status_on for item in sublist]
    elif os.environ.get('RESTORE_STATUS_ON'):
        restore_status_on = re.split(r'[ ,]+', os.environ['RESTORE_STATUS_ON'])
    else:
        restore_status_on = []

    if args.stop_operators:
        stop_operator_args = [item for sublist in args.stop_operators for item in sublist]
    elif os.environ.get('STOP_OPERATORS'):
        stop_operator_args = re.split(r'[ ,]+', os.environ['STOP_OPERATORS'])
    else:
        stop_operator_args = []

    stop_operator_list = []
    for stop_operator_arg in stop_operator_args:
        if re.match(r'^[a-z0-9\-]+/[a-z0-9\-]+$', stop_operator_arg):
            stop_operator_list.append(dict(zip(['namespace', 'name'], stop_operator_arg.split('/'))))
        else:
            print("Invalid value for STOP_OPERATORS, must be in format NAMESPACE/NAME or label selector")
            parser.print_help()

    if args.stop_operator_selectors:
        stop_operator_selector_args = [item for sublist in args.stop_operator_selectors for item in sublist]
    elif os.environ.get('STOP_OPERATOR_SELECTORS'):
        stop_operator_selector_args = re.split(r'[ ,]+', os.environ['STOP_OPERATOR_SELECTORS'])
    else:
        stop_operator_selector_args = []

    for stop_operator_selector_arg in stop_operator_selector_args:
        if re.match(r'^([a-z0-9.\-]+/)?[a-z0-9A-Z.\-]+(=[a-z0-9A-Z.\-]*)?$', stop_operator_selector_arg):
            stop_operator_list.extend(find_deployments(label_selector=stop_operator_selector_arg))
        else:
            print("Invalid value for STOP_OPERATOR_SELECTORS, must be valid label selectors")
            parser.print_help()

    init_logger()

    stop_operators(stop_operator_list)
    try:
        restore_backup(
            backup_path = args.backup[0],
            create_namespaces = args.create_namespaces,
            restore_status_on = restore_status_on,
        )
    finally:
        restart_operators(stop_operator_list)

if __name__ == '__main__':
    main()
